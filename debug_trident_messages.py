#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telethon import TelegramClient
from datetime import datetime, timedelta
import asyncio
import re
from config import *

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('sessions/history_session', API_ID, API_HASH)

async def debug_trident_messages():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Trident App Bot"""
    await client.start()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞
        trident_bot = await client.get_entity('trident_appbot')
        
        print(f"üì® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @trident_appbot")
        
        # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        start_date = datetime.now() - timedelta(days=7)
        print(f"üìÖ –ù–∞—á–∏–Ω–∞—è —Å: {start_date.strftime('%d.%m.%Y')}")
        
        checked_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        async for message in client.iter_messages(trident_bot, offset_date=start_date, limit=10):
            if message.text:
                checked_count += 1
                
                print(f"\n{'='*60}")
                print(f"–°–û–û–ë–©–ï–ù–ò–ï #{checked_count}")
                print(f"–î–∞—Ç–∞: {message.date}")
                print(f"ID: {message.id}")
                print(f"{'='*60}")
                print(f"–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢:")
                print(message.text)
                print(f"{'='*60}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                text_lower = message.text.lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                new_app_keywords = ['–¥–æ–±–∞–≤–ª–µ–Ω–æ', '–Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'üî•', '–¥–æ–±–∞–≤–∏–ª–∏']
                found_new_keywords = [kw for kw in new_app_keywords if kw in text_lower]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–Ω—ã
                ban_keywords = ['–±–∞–Ω', '–≤ –±–∞–Ω–µ', '‚õî', 'üõë', '–∑–∞–±–∞–Ω–µ–Ω–æ']
                found_ban_keywords = [kw for kw in ban_keywords if kw in text_lower]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–ø—É—Å–∫
                skip_keywords = ['–¥–æ—Å—Ç—É–ø–Ω–æ –∫ –∑–∞–ª–∏–≤—É', 'facebook', '—Ñ–± —Ç—Ä–∞—Ñ–∏–∫', 'üü¢']
                found_skip_keywords = [kw for kw in skip_keywords if kw in text_lower]
                
                print(f"üîç –ê–ù–ê–õ–ò–ó –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í:")
                print(f"  üÜï –ù–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {found_new_keywords}")
                print(f"  ‚ùå –ë–∞–Ω: {found_ban_keywords}")
                print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: {found_skip_keywords}")
                
                # –ò—â–µ–º URL
                url_match = re.search(r'https://play\.google\.com/store/apps/details\?id=([^\s&)]+)', message.text)
                if url_match:
                    print(f"  üîó Bundle ID: {url_match.group(1)}")
                else:
                    print(f"  üîó Bundle ID: –ù–ï –ù–ê–ô–î–ï–ù")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                print(f"\nüîç –ü–û–ò–°–ö –ù–ê–ó–í–ê–ù–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:")
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ü–æ—Å–ª–µ "üî•–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                name_pattern1 = r'üî•\s*–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\s+(.+?)\s+\(https'
                match1 = re.search(name_pattern1, message.text)
                if match1:
                    print(f"  üì± –ü–∞—Ç—Ç–µ—Ä–Ω 1 (–Ω–æ–≤–æ–µ): '{match1.group(1)}'")
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ü–æ—Å–ª–µ "‚õîÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
                name_pattern2 = r'‚õîÔ∏è\s*–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\s*(.+?)\s+\(https'
                match2 = re.search(name_pattern2, message.text)
                if match2:
                    print(f"  üì± –ü–∞—Ç—Ç–µ—Ä–Ω 2 (–±–∞–Ω ‚õî): '{match2.group(1)}'")
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ü–æ—Å–ª–µ "üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
                name_pattern3 = r'üõë\s*–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\s*(.+?)\s+–≤\s+–±–∞–Ω–µ'
                match3 = re.search(name_pattern3, message.text)
                if match3:
                    print(f"  üì± –ü–∞—Ç—Ç–µ—Ä–Ω 3 (–±–∞–Ω üõë): '{match3.group(1)}'")
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –û–±—â–∏–π –ø–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏–π
                general_patterns = [
                    r'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\s*(.+?)(?:\s+\(|$)',
                    r'–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\s+(.+?)(?:\s+\(|$)',
                    r'App:\s*(.+?)(?:\s+\(|$)'
                ]
                
                for i, pattern in enumerate(general_patterns, 4):
                    match = re.search(pattern, message.text, re.IGNORECASE)
                    if match:
                        print(f"  üì± –ü–∞—Ç—Ç–µ—Ä–Ω {i} (–æ–±—â–∏–π): '{match.group(1)}'")
                
                if not any([match1, match2, match3]):
                    print(f"  ‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ù–ï –ù–ê–ô–î–ï–ù–û —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏")
        
        print(f"\n‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {checked_count}")
        
    finally:
        await client.disconnect()

if __name__ == "__main__":
    print("üî± –û—Ç–ª–∞–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Trident App Bot")
    print("=" * 50)
    asyncio.run(debug_trident_messages()) 