#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telethon import TelegramClient
from datetime import datetime, timedelta
import asyncio
import re
from config import *

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('sessions/trident_debug_session', API_ID, API_HASH)

def clean_app_name(name):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not name:
        return name
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
    name = re.sub(r'^[^\w\s]+\s*', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ (markdown)
    name = re.sub(r'\*+', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    name = re.sub(r'\[.*?\]', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å URL)
    name = re.sub(r'\([^)]*\)', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Ç–∏–ø–∞ ], }, ), >
    name = re.sub(r'[\]\}>)]+\s*$', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = re.sub(r'\s+', ' ', name).strip()
    
    return name

def parse_trident_message(text, message_id):
    """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Trident App Bot —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
    print(f"\n--- –û–¢–õ–ê–î–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø {message_id} ---")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:200]}...")
    
    result = {
        'type': None,
        'name': '',
        'bundle': '',
        'url': ''
    }
    
    if not text:
        print("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
        return result
    
    parser = BOT_PARSERS.get('trident_appbot', {})
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {list(parser.keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞
    skip_patterns = parser.get('skip_patterns', [])
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞: {skip_patterns}")
    for skip_pattern in skip_patterns:
        if re.search(skip_pattern, text, re.IGNORECASE):
            print(f"‚ö†Ô∏è –ü–†–û–ü–£–°–ö–ê–Æ - –Ω–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–ø—É—Å–∫–∞: {skip_pattern}")
            return result
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    new_app_patterns = parser.get('new_app_patterns', [])
    ban_patterns = parser.get('ban_patterns', [])
    
    print(f"üÜï –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {new_app_patterns}")
    for pattern in new_app_patterns:
        if re.search(pattern, text, re.IGNORECASE):
            result['type'] = 'new_app'
            print(f"‚úÖ –ù–ê–ô–î–ï–ù –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {pattern}")
            break
    
    if not result['type']:
        print(f"üö´ –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–∞–Ω–æ–≤: {ban_patterns}")
        for pattern in ban_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                result['type'] = 'ban'
                print(f"‚úÖ –ù–ê–ô–î–ï–ù –ø–∞—Ç—Ç–µ—Ä–Ω –±–∞–Ω–∞: {pattern}")
                break
    
    if not result['type']:
        print("‚ùå –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        return result
    
    print(f"üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: {result['type']}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if result['type'] == 'new_app':
        name_pattern = parser.get('name_pattern')
        print(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–Ω–∏ –¥–ª—è new_app: {name_pattern}")
        if name_pattern:
            name_match = re.search(name_pattern, text)
            if name_match:
                result['name'] = clean_app_name(name_match.group(1).strip())
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–º—è: '{result['name']}'")
            else:
                print("‚ùå –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
    
    elif result['type'] == 'ban':
        ban_name_pattern = parser.get('ban_name_pattern')
        print(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–Ω–∏ –¥–ª—è ban: {ban_name_pattern}")
        if ban_name_pattern:
            name_match = re.search(ban_name_pattern, text)
            if name_match:
                result['name'] = clean_app_name(name_match.group(1).strip())
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–º—è –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ: '{result['name']}'")
            else:
                print("‚ùå –ò–º—è –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ Bundle ID
    url_pattern = parser.get('url_pattern')
    print(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω URL: {url_pattern}")
    if url_pattern:
        url_match = re.search(url_pattern, text)
        if url_match:
            result['bundle'] = url_match.group(1)
            result['url'] = f"https://play.google.com/store/apps/details?id={result['bundle']}"
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Bundle ID: '{result['bundle']}'")
        else:
            print("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"üìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result

def format_trident_message(data, bot_name, original_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–∏–ø
    if data['type'] == 'new_app':
        emoji = 'üöÄ'
        msg_type_display = 'new_app'
    elif data['type'] == 'ban':
        emoji = '‚ùå'
        msg_type_display = 'ban'
    else:
        emoji = 'üìù'
        msg_type_display = data['type']
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = [
        f"{emoji} **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç @trident_appbot**",
        f"ü§ñ **–ë–æ—Ç:** {bot_name}",
        f"üìÖ **–í—Ä–µ–º—è:** {current_time}",
        f"üè∑Ô∏è **–¢–∏–ø:** {msg_type_display}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    if data['type'] == 'new_app':
        message_parts.append(f"üì± **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** {data['name']}")
    elif data['type'] == 'ban':
        message_parts.append(f"üì± **–ó–∞–±–∞–Ω–µ–Ω–æ:** {data['name']}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º Bundle ID
    if data['bundle']:
        message_parts.append(f"üì¶ **Bundle ID:** {data['bundle']}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts.append(f"\n**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**")
    message_parts.append(original_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    if data['url']:
        message_parts.append(f"üîó **–°—Å—ã–ª–∫–∞:** {data['url']}")
    
    return '\n'.join(message_parts)

async def collect_trident_messages():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Trident App Bot —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
    await client.start()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        my_channel = await client.get_entity(MY_CHANNEL_ID)
        trident_bot = await client.get_entity('trident_appbot')
        
        print(f"üì® –°–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @trident_appbot")
        print(f"üì§ –ë—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤: {my_channel.title}")
        
        # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (60 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        start_date = datetime.now() - timedelta(days=DAYS_TO_LOAD)
        print(f"üìÖ –ù–∞—á–∏–Ω–∞—è —Å: {start_date.strftime('%d.%m.%Y')}")
        
        messages_collected = []
        checked_count = 0
        forwarded_count = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–µ—Ä–≤—ã–µ 20 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        async for message in client.iter_messages(trident_bot, offset_date=start_date, limit=20):
            if message.text:
                checked_count += 1
                
                print(f"\n{'='*50}")
                print(f"–°–û–û–ë–©–ï–ù–ò–ï #{checked_count}")
                print(f"–î–∞—Ç–∞: {message.date}")
                print(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                print(message.text)
                print(f"{'='*50}")
                
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                parsed_data = parse_trident_message(message.text, checked_count)
                
                if parsed_data['type']:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å
                    messages_collected.append((message, parsed_data))
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é")
                else:
                    print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø–∞—Ä—Å–∏–Ω–≥")
        
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {checked_count}")
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö: {len(messages_collected)}")
        
        # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        messages_collected.reverse()
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for message, parsed_data in messages_collected:
            formatted_message = format_trident_message(parsed_data, 'Trident Apps', message.text)
            
            await client.send_message(my_channel, formatted_message)
            forwarded_count += 1
            
            print(f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ: {forwarded_count}/{len(messages_collected)}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
            await asyncio.sleep(1.0)
        
        print(f"\n‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {forwarded_count}")
        
    finally:
        await client.disconnect()

if __name__ == "__main__":
    print("üî± –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Trident App Bot (DEBUG)")
    print("=" * 50)
    asyncio.run(collect_trident_messages()) 