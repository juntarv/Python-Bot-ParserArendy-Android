from telethon import TelegramClient
import asyncio
from config import API_ID, API_HASH, PHONE, MY_CHANNEL_ID

client = TelegramClient('diagnose_session', API_ID, API_HASH)

async def diagnose_channel():
    await client.start(PHONE)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
    channel = await client.get_entity(MY_CHANNEL_ID)
    print(f"üì® –ö–∞–Ω–∞–ª: {channel.title}")
    print("=" * 50)
    
    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n")
    
    message_count = 0
    message_types = {'new_app': 0, 'ban': 0, 'bundle': 0, 'other': 0}
    bots_found = set()
    
    async for message in client.iter_messages(channel, limit=10):
        message_count += 1
        print(f"\n--- –°–æ–æ–±—â–µ–Ω–∏–µ #{message_count} (ID: {message.id}) ---")
        print(f"–î–∞—Ç–∞: {message.date.strftime('%d.%m.%Y %H:%M')}")
        
        if message.text:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            preview = message.text[:200] + "..." if len(message.text) > 200 else message.text
            print(f"–¢–µ–∫—Å—Ç: {preview}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            text = message.text
            
            # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–æ–≤
            import re
            bot_match = re.search(r'@(\w+)', text)
            if bot_match:
                bot_username = bot_match.group(1)
                bots_found.add(bot_username)
                print(f"‚úì –ù–∞–π–¥–µ–Ω –±–æ—Ç: @{bot_username}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
            if 'üöÄ' in text or 'new_app' in text.lower():
                message_types['new_app'] += 1
                print("‚úì –¢–∏–ø: –ù–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            elif '‚ùå' in text or 'ban' in text.lower():
                message_types['ban'] += 1
                print("‚úì –¢–∏–ø: –ë–∞–Ω")
            elif 'üì¶' in text or 'bundle' in text.lower():
                message_types['bundle'] += 1
                print("‚úì –¢–∏–ø: Bundle")
            else:
                message_types['other'] += 1
                print("‚úì –¢–∏–ø: –î—Ä—É–≥–æ–µ")
            
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_patterns = [
                r'üì± \*\*–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\*\* (.+)',
                r'–ù–∞–∑–≤–∞–Ω–∏–µ:\s*(.+)',
                r'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\s*(.+)',
                r'Application\s+(.+?)\s+BANNED',
            ]
            
            for pattern in app_patterns:
                app_match = re.search(pattern, text)
                if app_match:
                    print(f"‚úì –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_match.group(1)}")
                    break
            
            # –ò—â–µ–º Bundle ID
            bundle_patterns = [
                r'üì¶ \*\*Bundle ID:\*\* (.+)',
                r'Bundle:\s*([^\s\n]+)',
                r'–ò–º—è –ø–∞–∫–µ—Ç–∞:\s*([^\s\n]+)',
                r'id=([^\s&]+)',
            ]
            
            for pattern in bundle_patterns:
                bundle_match = re.search(pattern, text)
                if bundle_match:
                    print(f"‚úì Bundle: {bundle_match.group(1)}")
                    break
        else:
            print("–¢–µ–∫—Å—Ç: [–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞]")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–ê:")
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
    print(f"\n–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:")
    for msg_type, count in message_types.items():
        print(f"  {msg_type}: {count}")
    print(f"\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ—Ç—ã: {', '.join('@' + bot for bot in bots_found) if bots_found else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
    
    # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
    print("\nüìä –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê:")
    total_messages = 0
    apps_data = []
    
    async for message in client.iter_messages(channel, limit=None):
        total_messages += 1
        
        if message.text and '@' in message.text:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            if any(word in message.text.lower() for word in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'app', 'bundle', '–Ω–∞–∑–≤–∞–Ω–∏–µ']):
                apps_data.append(message.id)
    
    print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: {total_messages}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö: {len(apps_data)}")
    
    if len(apps_data) == 0:
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö!")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –°–æ–æ–±—â–µ–Ω–∏—è –∏–º–µ—é—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç")
        print("2. –°–∫—Ä–∏–ø—Ç load_history.py –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è")
        print("3. –°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python load_history.py")
        print("–≠—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç –∫–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")

async def main():
    try:
        await diagnose_channel()
    finally:
        await client.disconnect()

if __name__ == '__main__':
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞")
    print("=" * 50)
    asyncio.run(main())