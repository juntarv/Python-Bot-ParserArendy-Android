from telethon import TelegramClient
from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime
import asyncio
import re
from config import *

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('sheets_session', API_ID, API_HASH)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
    try:
        creds = service_account.Credentials.from_service_account_file(
            GOOGLE_CREDENTIALS_FILE, scopes=SCOPES)
        service = build('sheets', 'v4', credentials=creds)
        return service
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª credentials.json –∏ SPREADSHEET_ID –≤ config.py")
        return None

def extract_bundle_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç bundle ID –∏–∑ URL Google Play"""
    if not url:
        return None
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Google Play URL
    match = re.search(r'id=([^\s&]+)', url)
    if match:
        return match.group(1)
    return None

def parse_message_data(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = {
        'bot': None,
        'app_name': None,
        'is_bundle': False,
        'date': None,
        'type': None,
        'url': None,
        'message_id': None,
        'bundle_id': None,
        'bot_username': None  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è @username
    }
    
    if not text:
        return data
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    clean_text = text.replace('**', '')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –±–æ—Ç–∞ –∏–∑ "–ò—Å—Ç–æ—Ä–∏—è –æ—Ç" –∏–ª–∏ "–ù–æ–≤–æ–µ –æ—Ç"
    username_match = re.search(r'–ò—Å—Ç–æ—Ä–∏—è –æ—Ç\s*@(\w+)', clean_text)
    if not username_match:
        username_match = re.search(r'–ù–æ–≤–æ–µ –æ—Ç\s*@(\w+)', clean_text)
    if username_match:
        data['bot_username'] = '@' + username_match.group(1)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –ø–æ–ª—è "ü§ñ –ë–æ—Ç:"
    bot_name_match = re.search(r'ü§ñ\s*–ë–æ—Ç:\s*(.+?)(?:\n|$)', clean_text)
    if bot_name_match:
        data['bot'] = bot_name_match.group(1).strip()
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–µ "ü§ñ –ë–æ—Ç:", –∏—Å–ø–æ–ª—å–∑—É–µ–º username
        data['bot'] = data['bot_username']
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    date_match = re.search(r'üìÖ\s*–í—Ä–µ–º—è:\s*(.+?)(?:\n|$)', clean_text)
    if date_match:
        data['date'] = date_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø
    type_match = re.search(r'üè∑Ô∏è\s*–¢–∏–ø:\s*(.+?)(?:\n|$)', clean_text)
    if type_match:
        type_str = type_match.group(1).strip()
        data['type'] = type_str
        data['is_bundle'] = '(Bundle)' in type_str
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_match = re.search(r'üì±\s*–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\s*(.+?)(?:\n|$)', clean_text)
    if app_match:
        data['app_name'] = app_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Bundle ID
    bundle_match = re.search(r'üì¶\s*Bundle ID:\s*(.+?)(?:\n|$)', clean_text)
    if bundle_match:
        data['bundle_id'] = bundle_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL
    url_match = re.search(r'üîó\s*–°—Å—ã–ª–∫–∞:\s*(.+?)(?:\n|$)', clean_text)
    if url_match:
        data['url'] = url_match.group(1).strip()
    else:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ URL –≤ —Ç–µ–∫—Å—Ç–µ
        url_pattern = r'https?://[^\s\)]+'
        url_found = re.search(url_pattern, text)
        if url_found:
            data['url'] = url_found.group(0)
    
    return data

async def get_all_apps_from_channel():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    await client.start(PHONE)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
    channel = await client.get_entity(MY_CHANNEL_ID)
    print(f"üì® –ß–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel.title}")
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    # –ö–ª—é—á —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ bundle –¥–ª—è —Ç–æ—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    apps = {}
    
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_count = 0
    parsed_count = 0
    
    async for message in client.iter_messages(channel, limit=None):
        if not message.text:
            continue
            
        message_count += 1
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = parse_message_data(message.text)
        data['message_id'] = message.id
        
        if not data['bot'] or not data['app_name']:
            continue
        
        parsed_count += 1
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º bundle_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ URL
        if data.get('bundle_id'):
            bundle = data['bundle_id']
        elif data.get('url'):
            bundle = extract_bundle_from_url(data['url'])
        else:
            bundle = None
        
        # –ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ + bundle (–µ—Å–ª–∏ –µ—Å—Ç—å) –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        if bundle:
            app_key = (data['bot'], data['app_name'], bundle)
        else:
            app_key = (data['bot'], data['app_name'], 'no_bundle')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –≤—ã—Ö–æ–¥ –∏–ª–∏ –±–∞–Ω
        if data['type'] and 'ban' in data['type'].lower():
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ
            found = False
            
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞:")
            print(f"   –ë–æ—Ç: {data['bot']}")
            print(f"   Username: {data.get('bot_username', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {data['app_name']}")
            print(f"   Bundle: {bundle}")
            
            for key, app in list(apps.items()):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                bot_match = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –±–æ—Ç–∞
                if bots_match(key[0], data['bot']) or (data.get('bot_username') and bots_match(key[0], data['bot_username'])):
                    bot_match = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ username
                elif data.get('bot_username') and key[0] == data['bot_username']:
                    bot_match = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–¥–ª—è —Å–ª—É—á–∞–µ–≤ —Ç–∏–ø–∞ "Banda Apps" –∏ "@banda_rent_apps_bot")
                elif data['bot'] and key[0] and (data['bot'].lower() in key[0].lower() or key[0].lower() in data['bot'].lower()):
                    bot_match = True
                
                if not bot_match:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                app_match = False
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                if key[1] == data['app_name']:
                    app_match = True
                # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã)
                elif key[1].lower().strip() == data['app_name'].lower().strip():
                    app_match = True
                # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ bundle
                elif bundle and len(key) > 2 and key[2] == bundle:
                    app_match = True
                
                if app_match:
                    apps[key]['ban_date'] = data['date']
                    apps[key]['status'] = '–ó–∞–±–∞–Ω–µ–Ω–æ'
                    found = True
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –±–∞–Ω –¥–ª—è: {app['app_name']}")
                    break
            
            if not found:
                print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∞–Ω–∞")
                print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞:")
                for key in apps.keys():
                    if data['bot'] in str(key[0]) or (data.get('bot_username') and data['bot_username'] in str(key[0])):
                        print(f"     - {key}")
        else:
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username
            bot_identifier = data['bot'] if data['bot'] else data.get('bot_username', 'unknown')
            
            if bundle:
                app_key = (bot_identifier, data['app_name'], bundle)
            else:
                app_key = (bot_identifier, data['app_name'], 'no_bundle')
            
            if app_key not in apps:
                apps[app_key] = {
                    'bot': bot_identifier,
                    'app_name': data['app_name'],
                    'is_bundle': data['is_bundle'],
                    'bundle_id': bundle or '',
                    'release_date': data['date'],
                    'ban_date': '',
                    'status': '–ê–∫—Ç–∏–≤–Ω–æ',
                    'url': data['url'] or '',
                    'message_id': data['message_id']
                }
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if message_count % 10 == 0:
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}", end='\r')
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
    print(f"üìÑ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {parsed_count}")
    print(f"üì± –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(apps)}")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if len(apps) == 0 and message_count > 0:
        print("\nüìä –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ:")
        msg_num = 0
        async for message in client.iter_messages(channel, limit=3):
            if message.text:
                msg_num += 1
                print(f"\n--- –°–æ–æ–±—â–µ–Ω–∏–µ {msg_num} ---")
                print(message.text[:300] + "..." if len(message.text) > 300 else message.text)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                test_data = parse_message_data(message.text)
                print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
                for key, value in test_data.items():
                    if value:
                        print(f"  {key}: {value}")
    
    return list(apps.values())

def prepare_sheets_data(apps):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets"""
    rows = []
    
    for app in apps:
        # –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –±–∞–Ω–∞, —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –æ—Ç –¥–∞—Ç—ã –≤—ã—Ö–æ–¥–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è
        lifetime_formula = f'=IF(E{len(rows)+2}="", TODAY()-DATEVALUE(REGEXEXTRACT(D{len(rows)+2}, "\\d{{2}}.\\d{{2}}.\\d{{4}}")), DATEVALUE(REGEXEXTRACT(E{len(rows)+2}, "\\d{{2}}.\\d{{2}}.\\d{{4}}"))-DATEVALUE(REGEXEXTRACT(D{len(rows)+2}, "\\d{{2}}.\\d{{2}}.\\d{{4}}")))'
        
        row = [
            app['bot'],                              # A: –ë–æ—Ç
            app['app_name'],                         # B: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app.get('bundle_id', ''),                # C: Bundle ID
            app['release_date'],                     # D: –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
            app['ban_date'],                         # E: –î–∞—Ç–∞ –±–∞–Ω–∞
            lifetime_formula,                        # F: –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ (—Ñ–æ—Ä–º—É–ª–∞)
            app['status'],                           # G: –°—Ç–∞—Ç—É—Å
            app['url'],                              # H: URL
            str(app['message_id'])                   # I: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        ]
        rows.append(row)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–æ—Ç—É –∏ –¥–∞—Ç–µ –≤—ã—Ö–æ–¥–∞
    rows.sort(key=lambda x: (x[0], x[3]), reverse=True)
    
    return rows

async def update_google_sheets(apps):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Google Sheets"""
    service = init_google_sheets()
    if not service:
        return
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        rows = prepare_sheets_data(apps)
        
        if not rows:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏")
            return
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        print("üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        service.spreadsheets().values().clear(
            spreadsheetId=SPREADSHEET_ID,
            range=SHEET_RANGE
        ).execute()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"üìù –ó–∞–ø–∏—Å—ã–≤–∞—é {len(rows)} —Å—Ç—Ä–æ–∫...")
        body = {
            'values': rows,
            'majorDimension': 'ROWS'
        }
        
        result = service.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=SHEET_RANGE,
            valueInputOption='USER_ENTERED',  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã
            body=body
        ).execute()
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {result.get('updatedRows', 0)} —Å—Ç—Ä–æ–∫")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        format_requests = [
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            {
                "autoResizeDimensions": {
                    "dimensions": {
                        "sheetId": 0,
                        "dimension": "COLUMNS",
                        "startIndex": 0,
                        "endIndex": 9
                    }
                }
            }
        ]
        
        service.spreadsheets().batchUpdate(
            spreadsheetId=SPREADSHEET_ID,
            body={"requests": format_requests}
        ).execute()
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

async def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        apps = await get_all_apps_from_channel()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        bots_stats = {}
        bundle_count = 0
        banned_count = 0
        
        for app in apps:
            bot = app['bot']
            if bot not in bots_stats:
                bots_stats[bot] = {'total': 0, 'banned': 0, 'bundle': 0}
            
            bots_stats[bot]['total'] += 1
            if app['is_bundle']:
                bundle_count += 1
                bots_stats[bot]['bundle'] += 1
            if app['status'] == '–ó–∞–±–∞–Ω–µ–Ω–æ':
                banned_count += 1
                bots_stats[bot]['banned'] += 1
        
        print(f"üì± –í—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(apps)}")
        print(f"üì¶ Bundle: {bundle_count}")
        print(f"‚ùå –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}")
        print(f"\nü§ñ –ü–æ –±–æ—Ç–∞–º:")
        for bot, stats in bots_stats.items():
            print(f"  {bot}: {stats['total']} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π ({stats['bundle']} bundle, {stats['banned']} –∑–∞–±–∞–Ω–µ–Ω–æ)")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
        if apps:
            print("\nüìä –û–±–Ω–æ–≤–ª—è—é Google Sheets...")
            await update_google_sheets(apps)
            print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Ç–∞–±–ª–∏—Ü—É")
            print(f"üîó https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        
def bots_match(bot1, bot2):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å—è—Ç—Å—è –ª–∏ –¥–≤–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫ –æ–¥–Ω–æ–º—É –±–æ—Ç—É"""
    if not bot1 or not bot2:
        return False
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    bot1_lower = bot1.lower()
    bot2_lower = bot2.lower()
    
    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if bot1_lower == bot2_lower:
        return True
    
    # –£–±–∏—Ä–∞–µ–º @ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    bot1_clean = bot1_lower.replace('@', '').replace('_bot', '').replace('bot', '')
    bot2_clean = bot2_lower.replace('@', '').replace('_bot', '').replace('bot', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
    if bot1_clean == bot2_clean:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –æ–¥–Ω–æ –≤ –¥—Ä—É–≥–æ–º
    if bot1_clean in bot2_clean or bot2_clean in bot1_clean:
        return True
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç–æ–≤
    known_mappings = {
        'banda': ['banda_rent_apps_bot', 'banda apps'],
        'ww': ['wwapps_bot', 'ww apps'],
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    }
    
    for key, values in known_mappings.items():
        if any(key in b.lower() for b in [bot1, bot2]):
            if any(v in bot1_lower for v in values) and any(v in bot2_lower for v in values):
                return True
    
    return False


if __name__ == '__main__':
    print("üìä –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram –≤ Google Sheets")
    print("=" * 50)
    asyncio.run(main())
    
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ channel_to_sheets.py

def normalize_app_name(name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    if not name:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    name = re.sub(r'[^\w\s\-\:]', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = ' '.join(name.split())
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    name = name.lower()
    
    # –£–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ü–µ (new 57, 16+)
    name = re.sub(r'\s*\d+\s*$', '', name)
    name = re.sub(r'\s+new\s+\d+', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞
    name = name.replace(' new ', ' ')
    name = name.replace(' td', '')
    
    return name.strip()

