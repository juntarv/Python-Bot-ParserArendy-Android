from telethon import TelegramClient
from datetime import datetime, timedelta
import asyncio
import re
from config import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient('history_session', API_ID, API_HASH)

def extract_bundle_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç bundle ID –∏–∑ URL Google Play"""
    if not url:
        return None
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Google Play URL
    match = re.search(r'id=([^\s&]+)', url)
    if match:
        return match.group(1)
    return None

def extract_urls_from_message(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏"""
    urls = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å entities (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)
    if message.entities:
        for entity in message.entities:
            # MessageEntityTextUrl - —ç—Ç–æ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞
            if hasattr(entity, 'url') and entity.url:
                urls.append(entity.url)
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ URL –≤ —Ç–µ–∫—Å—Ç–µ
    if message.text:
        url_pattern = r'https?://[^\s\)]+'
        found_urls = re.findall(url_pattern, message.text)
        urls.extend(found_urls)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return list(set(urls))

def parse_message_by_bot(message, bot_username):
    """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–æ—Ç–∞"""
    if bot_username not in BOT_PARSERS:
        return None
    
    parser = BOT_PARSERS[bot_username]
    text = message.text
    if not text:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    for skip_pattern in parser.get('skip_patterns', []):
        if re.search(skip_pattern, text):
            return None
    
    result = {
        'type': None,
        'name': None,
        'bundle': None,
        'url': None,
        'category': None,
        'is_bundle': False
    }
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    urls = extract_urls_from_message(message)
    result['url'] = urls[0] if urls else None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    for pattern in parser.get('new_app_patterns', []):
        if re.search(pattern, text):
            result['type'] = 'new_app'
            break
    
    if not result['type']:
        for pattern in parser.get('ban_patterns', []):
            if re.search(pattern, text):
                result['type'] = 'ban'
                break
    
    if not result['type']:
        return None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if result['type'] == 'ban' and 'ban_name_pattern' in parser:
        # –û—Å–æ–±—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –±–∞–Ω–æ–≤
        name_match = re.search(parser['ban_name_pattern'], text)
        if name_match:
            name_text = name_match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            name_text = re.sub(r'^[^\w\s]+\s*', '', name_text)
            result['name'] = name_text.strip()
    elif parser.get('name_pattern'):
        name_match = re.search(parser['name_pattern'], text)
        if name_match:
            name_text = name_match.group(1).strip()
            
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è banda
            if bot_username == 'banda_rent_apps_bot':
                name_text = re.sub(r'^[^\w\s]+\s*', '', name_text)
            
            # –ï—Å–ª–∏ URL –≤—Å—Ç—Ä–æ–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∫–∞–∫ —É wwapps_bot)
            if parser.get('url_in_name'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                url_in_name = re.search(r'\(?(https?://[^\s\)]+)\)?', name_text)
                if url_in_name:
                    if not result['url']:
                        result['url'] = url_in_name.group(1)
                    # –£–±–∏—Ä–∞–µ–º URL –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    name_text = re.sub(r'\s*\(?(https?://[^\s\)]+)\)?', '', name_text).strip()
            
            result['name'] = name_text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º bundle
    if parser.get('bundle_pattern'):
        bundle_match = re.search(parser['bundle_pattern'], text)
        if bundle_match:
            result['bundle'] = bundle_match.group(1).strip()
    
    # –ï—Å–ª–∏ bundle –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å URL –∏ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ
    if not result['bundle'] and parser.get('extract_bundle_from_url') and result['url']:
        result['bundle'] = extract_bundle_from_url(result['url'])
    
    # –î–ª—è banda - —Ç–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL –≤ —Å–∫–æ–±–∫–∞—Ö –ø–æ—Å–ª–µ BANNED
    if bot_username == 'banda_rent_apps_bot' and result['type'] == 'ban' and not result['url']:
        # –ò—â–µ–º URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ (https://...)
        url_match = re.search(r'\((https?://[^\)]+)\)', text)
        if url_match:
            result['url'] = url_match.group(1)
            result['bundle'] = extract_bundle_from_url(result['url'])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if parser.get('category_pattern'):
        category_match = re.search(parser['category_pattern'], text)
        if category_match:
            result['category'] = category_match.group(1).strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Bundle (–ø–æ —Ç–µ–∫—Å—Ç—É)
    if 'bundle' in text.lower() and result['type'] == 'new_app':
        result['is_bundle'] = True
    
    return result

def is_bundle(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Bundle"""
    if not text:
        return False
    
    text_lower = text.lower()
    bundle_keywords = KEYWORDS.get('bundle', [])
    
    for keyword in bundle_keywords:
        if keyword.lower() in text_lower:
            return True
    return False

def detect_message_type(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    if not text:
        return None, 'other'
    
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for category, keywords in KEYWORDS.items():
        for keyword in keywords:
            if keyword.lower() in text_lower:
                return keyword, category
    
    return None, 'other'

def should_forward_message(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not FILTER_BY_KEYWORDS:
        return True
    
    if not text or len(text) < MIN_MESSAGE_LENGTH:
        return False
    
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    for keyword in ALL_KEYWORDS:
        if keyword.lower() in text_lower:
            return True
    
    return False

def extract_app_name(text):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    patterns = [
        r'"([^"]+)"',  # –í –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        r'¬´([^¬ª]+)¬ª',  # –í –∫–∞–≤—ã—á–∫–∞—Ö-–µ–ª–æ—á–∫–∞—Ö
        r'"([^"]+)"',  # –í –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        r'\'([^\']+)\'',  # –í –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        r'\[([^\]]+)\]',  # –í –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –∏—â–µ–º –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    app_patterns = [
        r'(?:–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|app|–∏–≥—Ä–∞|game)\s+(\S+)',
        r'(?:–≤—ã—à–ª–æ|–∑–∞–ø—É—Å—Ç–∏–ª–∏|launched)\s+(\S+)',
    ]
    
    for pattern in app_patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1)
    
    return None

async def load_history():
    await client.start(PHONE)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")
    
    # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
    my_channel = await client.get_entity(MY_CHANNEL_ID)
    
    # –î–∞—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≥—Ä—É–∂–∞–µ–º
    date_from = datetime.now() - timedelta(days=DAYS_TO_LOAD)
    
    print(f"\nüìÖ –ó–∞–≥—Ä—É–∂–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {DAYS_TO_LOAD} –¥–Ω–µ–π")
    print(f"üìÖ –ù–∞—á–∏–Ω–∞—è —Å: {date_from.strftime('%d.%m.%Y')}")
    print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if FILTER_BY_KEYWORDS else '–í—ã–∫–ª—é—á–µ–Ω–∞'}")
    print(f"üñºÔ∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if FORWARD_MEDIA else '–í—ã–∫–ª—é—á–µ–Ω–∞'}")
    if FILTER_BY_KEYWORDS:
        print(f"üìù –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {len(ALL_KEYWORDS)}")
    print("-" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total_checked': 0,
        'total_forwarded': 0,
        'by_type': {'new_app': 0, 'ban': 0, 'update': 0, 'bundle': 0, 'other': 0},
        'by_bot': {}
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    for bot_username in COMPETITOR_BOTS:
        try:
            print(f"\nü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –±–æ—Ç–∞: @{bot_username}")
            
            # –ü–æ–ª—É—á–∞–µ–º entity –±–æ—Ç–∞
            bot = await client.get_entity(bot_username)
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
            bot_messages = 0
            bot_forwarded = 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            async for message in client.iter_messages(bot, offset_date=date_from, reverse=True):
                bot_messages += 1
                stats['total_checked'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                if message.date.replace(tzinfo=None) < date_from:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å
                if not should_forward_message(message.text):
                    continue
                
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
                parsed_data = parse_message_by_bot(message, bot_username)
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–ª–∏ —ç—Ç–æ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not parsed_data:
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                msg_type = parsed_data['type']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
                if not should_forward_message(message.text):
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                emoji = EMOJI.get(msg_type, EMOJI['other']) if USE_EMOJI else ''
                if parsed_data.get('is_bundle') and msg_type == 'new_app':
                    emoji = EMOJI.get('bundle', 'üì¶')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                forward_text = f"""{emoji} **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç @{bot_username}**
ü§ñ **–ë–æ—Ç:** {bot.first_name}
üìÖ **–í—Ä–µ–º—è:** {message.date.strftime('%d.%m.%Y %H:%M')}
üè∑Ô∏è **–¢–∏–ø:** {msg_type}{' (Bundle)' if parsed_data.get('is_bundle') else ''}
{f'üì± **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** {parsed_data["name"]}' if parsed_data.get('name') else ''}
{f'üì¶ **Bundle ID:** {parsed_data["bundle"]}' if parsed_data.get('bundle') else ''}
{f'üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {parsed_data["category"]}' if parsed_data.get('category') else ''}

**–°–æ–æ–±—â–µ–Ω–∏–µ:**
{message.text if message.text else '[–ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç]'}"""

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                if parsed_data.get('url'):
                    forward_text += f"\n\nüîó **–°—Å—ã–ª–∫–∞:** {parsed_data['url']}"
                
                forward_text += f"\n\n{'---' * 10}"
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                    await client.send_message(my_channel, forward_text)
                    bot_forwarded += 1
                    stats['total_forwarded'] += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
                    if parsed_data.get('is_bundle'):
                        stats['by_type']['bundle'] += 1
                    else:
                        stats['by_type'][msg_type] += 1
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞
                    if FORWARD_MEDIA and message.media and not message.web_preview:
                        await client.send_file(my_channel, message.media)
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    print(f"  üì§ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {bot_forwarded} –∏–∑ {bot_messages} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö", end='\r')
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞
                    await asyncio.sleep(DELAY_BETWEEN_MESSAGES)
                    
                except Exception as e:
                    error_msg = str(e)
                    if "wait of" in error_msg and "seconds is required" in error_msg:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                        wait_seconds = int(error_msg.split("wait of ")[1].split(" seconds")[0])
                        print(f"\n  ‚è∞ Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_seconds} —Å–µ–∫—É–Ω–¥ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞)")
                        print(f"  üí§ –ñ–¥—É {wait_seconds + 5} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(wait_seconds + 5)
                        
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞
                        try:
                            await client.send_message(my_channel, forward_text)
                            bot_forwarded += 1
                            stats['total_forwarded'] += 1
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
                            if parsed_data.get('is_bundle'):
                                stats['by_type']['bundle'] += 1
                            else:
                                stats['by_type'][msg_type] += 1
                                
                            print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")
                        except Exception as retry_error:
                            print(f"\n  ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {retry_error}")
                            continue
                    else:
                        print(f"\n  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
                        continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É
            stats['by_bot'][bot_username] = bot_forwarded
            
            print(f"\n  ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {bot_messages}")
            print(f"  ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {bot_forwarded}")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å –±–æ—Ç–æ–º @{bot_username}: {e}")
            stats['by_bot'][bot_username] = 0
            continue
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
        if bot_username != COMPETITOR_BOTS[-1]:  # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–æ—Ç
            print(f"\n‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–æ—Ç–æ–º...")
            await asyncio.sleep(5)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 50)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò:")
    print(f"üì® –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_checked']}")
    print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {stats['total_forwarded']}")
    print(f"\nüìà –ü–æ —Ç–∏–ø–∞–º:")
    print(f"  üöÄ –ù–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {stats['by_type']['new_app']}")
    print(f"  ‚ùå –ë–∞–Ω—ã: {stats['by_type']['ban']}")
    print(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {stats['by_type']['update']}")
    print(f"  üì¶ Bundle: {stats['by_type']['bundle']}")
    print(f"  üì® –î—Ä—É–≥–æ–µ: {stats['by_type']['other']}")
    print(f"\nü§ñ –ü–æ –±–æ—Ç–∞–º:")
    for bot, count in stats['by_bot'].items():
        print(f"  @{bot}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print(f"\nüìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

async def main():
    try:
        await load_history()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        print("\nüëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram")

if __name__ == '__main__':
    print("üöÄ –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")
    print("=" * 50)
    asyncio.run(main())