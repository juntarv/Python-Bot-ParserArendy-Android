from telethon import TelegramClient
import asyncio
from datetime import datetime, timedelta
from config import API_ID, API_HASH, PHONE, MY_CHANNEL_ID, BOT_PARSERS, DELAY_BETWEEN_MESSAGES
from load_history import parse_message_by_bot, extract_urls_from_message, extract_bundle_from_url

client = TelegramClient('debug_banda_session', API_ID, API_HASH)

async def debug_banda():
    await client.start(PHONE)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª
    bot = await client.get_entity('banda_rent_apps_bot')
    my_channel = await client.get_entity(MY_CHANNEL_ID)
    
    print(f"üì® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @banda_rent_apps_bot")
    print(f"üì§ –ë—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª: {my_channel.title}")
    print("=" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': 0,
        'new_android': 0,
        'new_ios': 0,
        'bans': 0,
        'fb_blocks': 0,
        'fb_restored': 0,
        'other': 0,
        'forwarded': 0,
        'failed': 0
    }
    
    # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
    date_from = datetime.now() - timedelta(days=30)
    
    print(f"üìÖ –ó–∞–≥—Ä—É–∂–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (—Å {date_from.strftime('%d.%m.%Y')})\n")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    async for message in client.iter_messages(bot, offset_date=date_from, reverse=True):
        if not message.text:
            continue
            
        stats['total'] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω—É–∂–Ω—ã–µ
        should_forward = False
        msg_type = None
        
        if 'üéâ New Android App üéâ' in message.text:
            stats['new_android'] += 1
            should_forward = True
            msg_type = 'new_app'
            
        elif 'üéâ New iOS App üéâ' in message.text:
            stats['new_ios'] += 1
            # iOS –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
        elif 'BANNED' in message.text and '‚ÄºÔ∏è' in message.text:
            stats['bans'] += 1
            should_forward = True
            msg_type = 'ban'
            
        elif 'Facebook has blocked' in message.text:
            stats['fb_blocks'] += 1
            
        elif 'Facebook ID has been changed' in message.text:
            stats['fb_restored'] += 1
            
        else:
            stats['other'] += 1
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if should_forward:
            try:
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                parsed_data = parse_message_by_bot(message, 'banda_rent_apps_bot')
                
                if parsed_data:
                    print(f"\nüì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}")
                    print(f"   –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ='{parsed_data.get('name')}', bundle='{parsed_data.get('bundle')}'")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                    emoji = 'üöÄ' if msg_type == 'new_app' else '‚ùå'
                    
                    forward_text = f"""{emoji} **–ò—Å—Ç–æ—Ä–∏—è –æ—Ç @banda_rent_apps_bot**
ü§ñ **–ë–æ—Ç:** Banda Apps
üìÖ **–í—Ä–µ–º—è:** {message.date.strftime('%d.%m.%Y %H:%M')}
üè∑Ô∏è **–¢–∏–ø:** {msg_type}
{f'üì± **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** {parsed_data["name"]}' if parsed_data.get('name') else 'üì± **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** [–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ]'}
{f'üì¶ **Bundle ID:** {parsed_data["bundle"]}' if parsed_data.get('bundle') else ''}

**–°–æ–æ–±—â–µ–Ω–∏–µ:**
{message.text}"""

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    if parsed_data.get('url'):
                        forward_text += f"\n\nüîó **–°—Å—ã–ª–∫–∞:** {parsed_data['url']}"
                    
                    forward_text += f"\n\n{'---' * 10}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                    await client.send_message(my_channel, forward_text)
                    stats['forwarded'] += 1
                    print(f"   ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞
                    await asyncio.sleep(DELAY_BETWEEN_MESSAGES)
                else:
                    print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å {msg_type} —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}")
                    print(f"   –¢–µ–∫—Å—Ç: {message.text[:100]}...")
                    stats['failed'] += 1
                    
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è ID {message.id}: {e}")
                stats['failed'] += 1
                
                # –ï—Å–ª–∏ flood wait
                if "wait of" in str(e):
                    wait_seconds = int(str(e).split("wait of ")[1].split(" seconds")[0])
                    print(f"   ‚è∞ –ñ–¥—É {wait_seconds} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(wait_seconds + 5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if stats['total'] % 10 == 0:
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total']} —Å–æ–æ–±—â–µ–Ω–∏–π...", end='\r')
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total']}")
    print(f"‚îú‚îÄ üéâ –ù–æ–≤—ã–µ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {stats['new_android']}")
    print(f"‚îú‚îÄ üéâ –ù–æ–≤—ã–µ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {stats['new_ios']} (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
    print(f"‚îú‚îÄ ‚ùå –ë–∞–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {stats['bans']}")
    print(f"‚îú‚îÄ üö´ FB –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {stats['fb_blocks']} (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
    print(f"‚îú‚îÄ ‚úÖ FB –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stats['fb_restored']} (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
    print(f"‚îî‚îÄ ‚ùì –î—Ä—É–≥–∏–µ: {stats['other']} (–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats['forwarded']}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {stats['failed']}")

async def main():
    try:
        await debug_banda()
    finally:
        await client.disconnect()

if __name__ == '__main__':
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç banda_rent_apps_bot")
    print("=" * 50)
    asyncio.run(main())