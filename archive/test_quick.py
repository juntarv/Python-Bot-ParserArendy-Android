#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
from telethon import TelegramClient
from config import *
from channel_to_sheets import parse_message_data

async def test_plinko_tap():
    client = TelegramClient('test_session', API_ID, API_HASH)
    await client.start(PHONE)
    
    channel = await client.get_entity(MY_CHANNEL_ID)
    print('üîç –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è Plinko Tap –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...')
    
    new_app_msg = None
    ban_msg = None
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    plinko_messages = []
    async for message in client.iter_messages(channel):
        if message.text and 'Plinko Tap' in message.text:
            plinko_messages.append(message)
            print(f'üìù –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Plinko Tap:')
            print(f'   –î–∞—Ç–∞: {message.date}')
            print(f'   –°–æ–¥–µ—Ä–∂–∏—Ç "–¢–∏–ø: new_app": {"–¢–∏–ø: new_app" in message.text}')
            print(f'   –°–æ–¥–µ—Ä–∂–∏—Ç "–¢–∏–ø: ban": {"–¢–∏–ø: ban" in message.text}')
            print(f'   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {message.text[:200]}...')
            print()
    
    print(f'–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Plinko Tap: {len(plinko_messages)}')
    
    for msg in plinko_messages:
        if '–¢–∏–ø:** new_app' in msg.text:
            new_app_msg = msg
        elif '–¢–∏–ø:** ban' in msg.text:
            ban_msg = msg
    
    if new_app_msg and ban_msg:
        print('‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!')
        
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        new_data = parse_message_data(new_app_msg.text)
        print(f'\nüì± –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:')
        print(f'   –ù–∞–∑–≤–∞–Ω–∏–µ: "{new_data["app_name"]}"')
        print(f'   –¢–∏–ø: {new_data["type"]}')
        
        # –ü–∞—Ä—Å–∏–º –±–∞–Ω
        ban_data = parse_message_data(ban_msg.text)
        print(f'\n‚ùå –î–∞–Ω–Ω—ã–µ –±–∞–Ω–∞:')
        print(f'   –ù–∞–∑–≤–∞–Ω–∏–µ: "{ban_data["app_name"]}"')
        print(f'   –¢–∏–ø: {ban_data["type"]}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        print(f'\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:')
        print(f'   new_app –Ω–∞–∑–≤–∞–Ω–∏–µ: "{new_data["app_name"]}" (–¥–ª–∏–Ω–∞: {len(new_data["app_name"])})')
        print(f'   ban –Ω–∞–∑–≤–∞–Ω–∏–µ: "{ban_data["app_name"]}" (–¥–ª–∏–Ω–∞: {len(ban_data["app_name"])})')
        print(f'   –†–∞–≤–Ω—ã –ª–∏? {new_data["app_name"] == ban_data["app_name"]}')
        
        if new_data["app_name"] != ban_data["app_name"]:
            print(f'   –ë–∞–π—Ç—ã new_app: {new_data["app_name"].encode("utf-8")}')
            print(f'   –ë–∞–π—Ç—ã ban: {ban_data["app_name"].encode("utf-8")}')
    else:
        print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è')
        
    await client.disconnect()

if __name__ == "__main__":
    asyncio.run(test_plinko_tap()) 