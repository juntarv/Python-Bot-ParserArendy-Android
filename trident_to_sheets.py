from telethon import TelegramClient
from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime
import asyncio
import re
from config import *

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('sessions/history_session', API_ID, API_HASH)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

def clean_app_name(name):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not name:
        return name
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
    name = re.sub(r'^[^\w\s]+\s*', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ (markdown)
    name = re.sub(r'\*+', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    name = re.sub(r'\[.*?\]', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å URL)
    name = re.sub(r'\([^)]*\)', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Ç–∏–ø–∞ ], }, ), >
    name = re.sub(r'[\]\}>)]+\s*$', '', name)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    name = re.sub(r'\s+', ' ', name).strip()
    
    return name

def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
    try:
        creds = service_account.Credentials.from_service_account_file(
            GOOGLE_CREDENTIALS_FILE, scopes=SCOPES)
        service = build('sheets', 'v4', credentials=creds)
        return service
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

def create_trident_sheet(service):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ª–∏—Å—Ç Trident Apps –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        spreadsheet = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
        sheets = spreadsheet.get('sheets', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∏—Å—Ç Trident Apps
        trident_sheet_exists = False
        for sheet in sheets:
            if sheet['properties']['title'] == 'Trident Apps':
                trident_sheet_exists = True
                print("üìã –õ–∏—Å—Ç Trident Apps —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                break
        
        if not trident_sheet_exists:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
            print("üìã –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –ª–∏—Å—Ç Trident Apps...")
            request = {
                'addSheet': {
                    'properties': {
                        'title': 'Trident Apps',
                        'gridProperties': {
                            'rowCount': 1000,
                            'columnCount': 10
                        }
                    }
                }
            }
            
            result = service.spreadsheets().batchUpdate(
                spreadsheetId=SPREADSHEET_ID,
                body={'requests': [request]}
            ).execute()
            
            print("‚úÖ –õ–∏—Å—Ç Trident Apps —Å–æ–∑–¥–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞: {e}")
        return False

def parse_message_data(text):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è Trident"""
    data = {}
    
    if not text:
        return data
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    clean_text = text.replace('*', '').strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ
    bot_match = re.search(r'ü§ñ\s*–ë–æ—Ç:\s*(.+?)(?:\n|$)', clean_text)
    if bot_match:
        data['bot'] = bot_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    time_match = re.search(r'üìÖ\s*–í—Ä–µ–º—è:\s*(.+?)(?:\n|$)', clean_text)
    if time_match:
        data['timestamp'] = time_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø
    type_match = re.search(r'üè∑Ô∏è\s*–¢–∏–ø:\s*(.+?)(?:\n|$)', clean_text)
    if type_match:
        type_str = type_match.group(1).strip()
        data['type'] = type_str
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_match = re.search(r'üì±\s*(?:\*\*)?–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:(?:\*\*)?\s*(.+?)(?:\n|$)', clean_text)
    if not app_match:
        app_match = re.search(r'üì±\s*(?:\*\*)?–ó–∞–±–∞–Ω–µ–Ω–æ:(?:\*\*)?\s*(.+?)(?:\n|$)', clean_text)
    if app_match:
        data['app_name'] = clean_app_name(app_match.group(1).strip())
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Bundle ID
    bundle_match = re.search(r'üì¶\s*Bundle ID:\s*(.+?)(?:\n|$)', clean_text)
    if bundle_match:
        data['bundle_id'] = bundle_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL
    url_match = re.search(r'üîó\s*–°—Å—ã–ª–∫–∞:\s*(https?://[^\s]+)', clean_text)
    if url_match:
        data['url'] = url_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_id_match = re.search(r'üì®\s*ID —Å–æ–æ–±—â–µ–Ω–∏—è:\s*(\d+)', clean_text)
    if msg_id_match:
        data['message_id'] = msg_id_match.group(1).strip()
    
    return data

async def get_trident_from_channel():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Trident –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    await client.start()
    
    try:
        channel = await client.get_entity(MY_CHANNEL_ID)
        print(f"üì® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª: {channel.title}")
        
        apps = {}
        message_count = 0
        parsed_count = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = []
        async for message in client.iter_messages(channel):
            if message.text and ('ü§ñ' in message.text and '–ë–æ—Ç:' in message.text) and ('Trident' in message.text or 'trident_appbot' in message.text):
                messages.append(message)
                message_count += 1
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        messages.reverse()
        
        for message in messages:
            data = parse_message_data(message.text)
            
            if not data.get('app_name'):
                continue
                
            parsed_count += 1
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_key = (data.get('bot', ''), data['app_name'], data.get('bundle_id', ''))
            
            if data.get('type') == 'new_app':
                # –ù–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                apps[app_key] = {
                    'bot': data.get('bot', 'Trident Apps'),
                    'app_name': data['app_name'],
                    'bundle_id': data.get('bundle_id', ''),
                    'release_date': data.get('timestamp', ''),
                    'ban_date': '',
                    'status': '–ê–∫—Ç–∏–≤–Ω–æ',
                    'url': data.get('url', ''),
                    'message_id': data.get('message_id', '')
                }
            
            elif data.get('type') == 'ban':
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∞–Ω–∞
                banned_app_name = data['app_name']
                
                for key, app_data in apps.items():
                    if app_data['app_name'] == banned_app_name:
                        print(f"‚úÖ –ù–ê–ô–î–ï–ù –ò –û–ë–ù–û–í–õ–ï–ù –ë–ê–ù –¥–ª—è: {banned_app_name}")
                        app_data['ban_date'] = data.get('timestamp', '')
                        app_data['status'] = '–ó–∞–±–∞–Ω–µ–Ω–æ'
                        break
                else:
                    print(f"‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∞–Ω–∞: {banned_app_name}")
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    apps[app_key] = {
                        'bot': data.get('bot', 'Trident Apps'),
                        'app_name': data['app_name'],
                        'bundle_id': data.get('bundle_id', ''),
                        'release_date': '',
                        'ban_date': data.get('timestamp', ''),
                        'status': '–ó–∞–±–∞–Ω–µ–Ω–æ (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—Ö–æ–¥–∞)',
                        'url': data.get('url', ''),
                        'message_id': data.get('message_id', '')
                    }
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if parsed_count % 10 == 0:
                print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {parsed_count}", end='\r')
        
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        print(f"üìÑ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {parsed_count}")
        print(f"üì± –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π Trident: {len(apps)}")
        
        return list(apps.values())
        
    finally:
        await client.disconnect()

def convert_date_for_sheets(date_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY HH:MM –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not date_str or date_str == '':
        return ''
    
    try:
        if ' ' in date_str:
            date_str = date_str.split(' ')[0]  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
        return date_str
    except:
        return date_str

def prepare_sheets_data(apps):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets"""
    rows = []
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = [
        '–ë–æ—Ç', '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'Bundle ID', '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞', '–î–∞—Ç–∞ –±–∞–Ω–∞', 
        '–°—Ä–æ–∫ –∂–∏–∑–Ω–∏ (–¥–Ω–∏)', '–°—Ç–∞—Ç—É—Å', 'URL', 'ID —Å–æ–æ–±—â–µ–Ω–∏—è'
    ]
    rows.append(headers)
    
    for app in apps:
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: –î–∞—Ç–∞ –±–∞–Ω–∞ - –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
        row_number = len(rows) + 1  # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        lifetime_formula = f'=IF(E{row_number}="", "", E{row_number}-D{row_number})'
        
        row = [
            app['bot'],                                    # A: –ë–æ—Ç
            app['app_name'],                               # B: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app.get('bundle_id', ''),                      # C: Bundle ID
            convert_date_for_sheets(app['release_date']),  # D: –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
            convert_date_for_sheets(app['ban_date']),      # E: –î–∞—Ç–∞ –±–∞–Ω–∞
            lifetime_formula,                              # F: –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ (—Ñ–æ—Ä–º—É–ª–∞)
            app['status'],                                 # G: –°—Ç–∞—Ç—É—Å
            app['url'],                                    # H: URL
            str(app['message_id'])                         # I: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        ]
        rows.append(row)
    
    return rows

def update_trident_sheet(service, data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ Trident Apps"""
    try:
        # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç Trident Apps
        print("üßπ –û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ Trident Apps...")
        service.spreadsheets().values().clear(
            spreadsheetId=SPREADSHEET_ID,
            range='Trident Apps!A:Z'
        ).execute()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"üìù –ó–∞–ø–∏—Å—ã–≤–∞—é {len(data)} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç Trident Apps...")
        body = {
            'values': data,
            'majorDimension': 'ROWS'
        }
        
        result = service.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range='Trident Apps!A1',
            valueInputOption='USER_ENTERED',  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã
            body=body
        ).execute()
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {result.get('updatedRows', 0)} —Å—Ç—Ä–æ–∫ –≤ –ª–∏—Å—Ç–µ Trident Apps")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        format_requests = [
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            {
                "autoResizeDimensions": {
                    "dimensions": {
                        "sheetId": get_sheet_id(service, 'Trident Apps'),
                        "dimension": "COLUMNS",
                        "startIndex": 0,
                        "endIndex": 9
                    }
                }
            }
        ]
        
        service.spreadsheets().batchUpdate(
            spreadsheetId=SPREADSHEET_ID,
            body={"requests": format_requests}
        ).execute()
        
        print("‚úÖ –õ–∏—Å—Ç Trident Apps –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ Trident Apps: {e}")

def get_sheet_id(service, sheet_name):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ª–∏—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        spreadsheet = service.spreadsheets().get(spreadsheetId=SPREADSHEET_ID).execute()
        sheets = spreadsheet.get('sheets', [])
        
        for sheet in sheets:
            if sheet['properties']['title'] == sheet_name:
                return sheet['properties']['sheetId']
        return 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    except:
        return 0

async def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Trident –∏–∑ –∫–∞–Ω–∞–ª–∞
        apps = await get_trident_from_channel()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Trident Apps:")
        bundle_count = sum(1 for app in apps if app.get('bundle_id'))
        banned_count = sum(1 for app in apps if '–ó–∞–±–∞–Ω–µ–Ω–æ' in app['status'])
        
        print(f"üì± –í—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {len(apps)}")
        print(f"üì¶ –° Bundle ID: {bundle_count}")
        print(f"‚ùå –ó–∞–±–∞–Ω–µ–Ω–æ: {banned_count}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
        print("\nüìä –û–±–Ω–æ–≤–ª—è—é Google Sheets...")
        service = init_google_sheets()
        if not service:
            return
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç Trident Apps –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not create_trident_sheet(service):
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sheets_data = prepare_sheets_data(apps)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç Trident Apps
        update_trident_sheet(service, sheets_data)
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—Å—Ç Trident Apps –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ")
        print(f"üîó {SPREADSHEET_URL}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üî± –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Trident Apps —Å Google Sheets")
    print("=" * 50)
    asyncio.run(main()) 