from telethon import TelegramClient, events
import asyncio
import re
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API
api_id = '21300389'  # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ https://my.telegram.org
api_hash = 'acf2f54b7dd38ae4ca633427f7d7f32c'
phone = '+380962820343'

# ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)
MY_CHANNEL_ID =  -1002568412343  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (username –±–µ–∑ @)
COMPETITOR_BOTS = [
    'wwapps_bot',
    #'competitor2_bot', 
    #'competitor3_bot',
    # –î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –±–æ—Ç–æ–≤
]

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient('session_name', api_id, api_hash)

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
PATTERNS = {
    'new_app': [
        r'(?:–≤—ã—à–ª–æ|–î–æ—Å—Ç—É–ø–Ω–æ|–Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|released|launched|new app)',
        r'(?:—Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ|now available|–ø–æ—è–≤–∏–ª–æ—Å—å)'
    ],
    'ban': [
        r'(?:BAN|—É–¥–∞–ª–∏–ª–∏|banned|removed|–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏)',
        r'(?:–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ|app removed)'
    ]
}

def identify_message_type(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text_lower = text.lower()
    
    for msg_type, patterns in PATTERNS.items():
        for pattern in patterns:
            if re.search(pattern, text_lower):
                return msg_type
    return 'other'

async def main():
    await client.start(phone)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ü–æ–ª—É—á–∞–µ–º entity –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    my_channel = await client.get_entity(MY_CHANNEL_ID)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage(from_users=COMPETITOR_BOTS))
    async def handler(event):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender = await event.get_sender()
            bot_username = sender.username
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type = identify_message_type(event.text)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            forward_text = f"""üì® **–ù–æ–≤–æ–µ –æ—Ç @{bot_username}**
ü§ñ **–ë–æ—Ç:** {sender.first_name}
üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
üè∑Ô∏è **–¢–∏–ø:** {message_type}

**–°–æ–æ–±—â–µ–Ω–∏–µ:**
{event.text}

{'üîó ' + event.message.entities[0].url if event.message.entities else ''}
{'---' * 10}"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–∞—à –∫–∞–Ω–∞–ª
            await client.send_message(my_channel, forward_text)
            
            print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{bot_username}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏ –∏—Ö
            if event.message.media:
                await client.send_file(my_channel, event.message.media)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
    @client.on(events.NewMessage(pattern='/status'))
    async def status_handler(event):
        if event.sender_id == (await client.get_me()).id:
            await event.reply(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\nüìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {len(COMPETITOR_BOTS)} –±–æ—Ç–æ–≤")
    
    print("–û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤:")
    for bot in COMPETITOR_BOTS:
        print(f"  - @{bot}")
    
    # –î–µ—Ä–∂–∏–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())